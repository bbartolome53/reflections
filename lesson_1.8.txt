Having access to the entire history of a file helps you review your 
mistakes and learn from them.

Manual Commits

The problem with manually choosing when to commit is user error. You may 
occasionally forget to make commits when you need to, espcially when you 
are extremely busy. Also, when you make manual commits instinctively, 
there is the possibility of making too many.

Multi-File Commits

Some VCSs focus on multiple file commits because they have a shared relationship. It makes sense to save all the changes together because the changes affect each other. Other services don't support multi-file commits because it's unnecessary. A Google Doc file that is changed isn't necessarily related to other documents in the repository, and the commit process only wastes resources and possibly bandwidth.

Using Git to View History

The command git log shows a history of files, while git diff can provide details of changes between commits.

Confidence from Version Control

Having the ability to switch back to an older version helps me more confident about making broad sweeping changes in a project, because there is an option to revert back if needed.

How do you want to use GIT?

I want to use Git version control to manage versions of documents.

Initializing a repository

When you run the command git init, metadata indicating it's a git repository is added and work can begin for version control tasks.

Staging Area

The staging area is a holding area prior to changes being applied to files in a Git repository. It is a mechanism that helps users manage changes to files before they are made permanently applied to the files in Git repository.

Commit Size

Using the staging area and git diff --staged, you can check the size of your commit and review if the change is a logical change.

When to use branches

Branches can be useful when you need more than one version of a project or file, or you want to test a particular change.

Visualizing with diagrams

Diagrams help you understand where you are and how much work was done for a particular branch in your Git repository.

Merging two branches

When you merge two branches, commits in one branch are combined with commits in another, resulting in one unified branch.

Automatic vs manual merging

Automatic merging is convenient and avoids unnecessary work. Merging manually ensures you know exactly what you want to merge, but is prone to human error. Automatic merging is more efficient, but the outcome may not always be what the developer expects. 

Remote Repository vs Local

A remote repository is useful if you use multiple systems to work on your project, or there are other contributors to the project who need to access the content.

Pull changes automatically

Automatic pull changes automatically might interrupt the work you are currently doing.
